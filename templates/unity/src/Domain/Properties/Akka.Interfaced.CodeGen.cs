// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using Akka.Actor;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

#region Domain.IGreeter

namespace Domain
{
    [PayloadTableForInterfacedActor(typeof(IGreeter))]
    public static class IGreeter_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetHelloCount_Invoke), typeof(GetHelloCount_Return) },
                { typeof(Hello_Invoke), typeof(Hello_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class GetHelloCount_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType() { return typeof(IGreeter); }
            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGreeter)__target).GetHelloCount();
                return (IValueGetable)(new GetHelloCount_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class GetHelloCount_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Int32 v;
            public Type GetInterfaceType() { return typeof(IGreeter); }
            public object Value { get { return v; } }
        }

        [ProtoContract, TypeAlias]
        public class Hello_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String who;
            public Type GetInterfaceType() { return typeof(IGreeter); }
            public async Task<IValueGetable> InvokeAsync(object __target)
            {
                var __v = await ((IGreeter)__target).Hello(who);
                return (IValueGetable)(new Hello_Return { v = __v });
            }
        }

        [ProtoContract, TypeAlias]
        public class Hello_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.String v;
            public Type GetInterfaceType() { return typeof(IGreeter); }
            public object Value { get { return v; } }
        }
    }

    public interface IGreeter_NoReply
    {
        void GetHelloCount();
        void Hello(System.String who);
    }

    [ProtoContract, TypeAlias]
    public class GreeterRef : InterfacedActorRef, IGreeter, IGreeter_NoReply
    {
        [ProtoMember(1)] private ActorRefBase _actor
        {
            get { return (ActorRefBase)Actor; }
            set { Actor = value; }
        }

        private GreeterRef() : base(null)
        {
        }

        public GreeterRef(IActorRef actor) : base(actor)
        {
        }

        public GreeterRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IGreeter_NoReply WithNoReply()
        {
            return this;
        }

        public GreeterRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new GreeterRef(Actor, requestWaiter, Timeout);
        }

        public GreeterRef WithTimeout(TimeSpan? timeout)
        {
            return new GreeterRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Int32> GetHelloCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.GetHelloCount_Invoke {  }
            };
            return SendRequestAndReceive<System.Int32>(requestMessage);
        }

        public Task<System.String> Hello(System.String who)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.Hello_Invoke { who = who }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        void IGreeter_NoReply.GetHelloCount()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.GetHelloCount_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IGreeter_NoReply.Hello(System.String who)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IGreeter_PayloadTable.Hello_Invoke { who = who }
            };
            SendRequest(requestMessage);
        }
    }
}

#endregion
